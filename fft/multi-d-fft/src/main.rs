// #![no_std]
use microfft::{real::rfft_512, Complex32};
use micromath::F32Ext;

// #[repr(C)]
pub struct Presence {
    is_present: bool,
    bin_number: [u8; 3],
}


fn main(){

    let sample: [u16; 500] = [2200, 3116, 3770, 3992, 3769, 3242, 2649, 2234, 2149, 2400, 2844, 3247, 3379, 3104, 2440, 1555, 711, 165, 81, 461, 1157, 1918, 2492, 2714, 2571, 2200, 1828, 1685, 1907, 2481, 3242, 3938, 4318, 4234, 3688, 2844, 1959, 1295, 1020, 1152, 1555, 1999, 2250, 2165, 1750, 1157, 630, 407, 629, 1283, 2200, 3116, 3770, 3992, 3769, 3242, 2649, 2234, 2149, 2400, 2844, 3247, 3379, 3104, 2440, 1555, 711, 165, 81, 461, 1157, 1918, 2492, 2714, 2571, 2200, 1828, 1685, 1907, 2481, 3242, 3938, 4318, 4234, 3688, 2844, 1959, 1295, 1020, 1152, 1555, 1999, 2250, 2165, 1750, 1157, 630, 407, 629, 1283, 2200, 3116, 3770, 3992, 3769, 3242, 2649, 2234, 2149, 2400, 2844, 3247, 3379, 3104, 2440, 1555, 711, 165, 81, 461, 1157, 1918, 2492, 2714, 2571, 2200, 1828, 1685, 1907, 2481, 3242, 3938, 4318, 4234, 3688, 2844, 1959, 1295, 1020, 1152, 1555, 1999, 2250, 2165, 1750, 1157, 630, 407, 629, 1283, 2200, 3116, 3770, 3992, 3769, 3242, 2649, 2234, 2149, 2400, 2844, 3247, 3379, 3104, 2440, 1555, 711, 165, 81, 461, 1157, 1918, 2492, 2714, 2571, 2200, 1828, 1685, 1907, 2481, 3242, 3938, 4318, 4234, 3688, 2844, 1959, 1295, 1020, 1152, 1555, 1999, 2250, 2165, 1750, 1157, 630, 407, 629, 1283, 2200, 3116, 3770, 3992, 3769, 3242, 2649, 2234, 2149, 2400, 2844, 3247, 3379, 3104, 2440, 1555, 711, 165, 81, 461, 1157, 1918, 2492, 2714, 2571, 2200, 1828, 1685, 1907, 2481, 3242, 3938, 4318, 4234, 3688, 2844, 1959, 1295, 1020, 1152, 1555, 1999, 2250, 2165, 1750, 1157, 630, 407, 629, 1283, 2200, 3116, 3770, 3992, 3769, 3242, 2649, 2234, 2149, 2400, 2844, 3247, 3379, 3104, 2440, 1555, 711, 165, 81, 461, 1157, 1918, 2492, 2714, 2571, 2200, 1828, 1685, 1907, 2481, 3242, 3938, 4318, 4234, 3688, 2844, 1959, 1295, 1020, 1152, 1555, 1999, 2250, 2165, 1750, 1157, 630, 407, 629, 1283, 2200, 3116, 3770, 3992, 3769, 3242, 2649, 2234, 2149, 2400, 2844, 3247, 3379, 3104, 2440, 1555, 711, 165, 81, 461, 1157, 1918, 2492, 2714, 2571, 2200, 1828, 1685, 1907, 2481, 3242, 3938, 4318, 4234, 3688, 2844, 1959, 1295, 1020, 1152, 1555, 1999, 2250, 2165, 1750, 1157, 630, 407, 629, 1283, 2200, 3116, 3770, 3992, 3769, 3242, 2649, 2234, 2149, 2400, 2844, 3247, 3379, 3104, 2440, 1555, 711, 165, 81, 461, 1157, 1918, 2492, 2714, 2571, 2200, 1828, 1685, 1907, 2481, 3242, 3938, 4318, 4234, 3688, 2844, 1959, 1295, 1020, 1152, 1555, 1999, 2250, 2165, 1750, 1157, 630, 407, 629, 1283, 2200, 3116, 3770, 3992, 3769, 3242, 2649, 2234, 2149, 2400, 2844, 3247, 3379, 3104, 2440, 1555, 711, 165, 81, 461, 1157, 1918, 2492, 2714, 2571, 2200, 1828, 1685, 1907, 2481, 3242, 3938, 4318, 4234, 3688, 2844, 1959, 1295, 1020, 1152, 1555, 1999, 2250, 2165, 1750, 1157, 630, 407, 629, 1283, 2200, 3116, 3770, 3992, 3769, 3242, 2649, 2234, 2149, 2400, 2844, 3247, 3379, 3104, 2440, 1555, 711, 165, 81, 461, 1157, 1918, 2492, 2714, 2571, 2200, 1828, 1685, 1907, 2481, 3242, 3938, 4318, 4234, 3688, 2844, 1959, 1295, 1020, 1152, 1555, 1999, 2250, 2165, 1750, 1157, 630, 407, 629, 1283];
    
    let mut radar_number: [[u16; 500]; 64] = [[0; 500]; 64];

    for i in 0..64{
        radar_number[i] = sample;
    }

    let mut float_adc_data1: [[f32; 512]; 64] = [[0.0; 512]; 64];
    generate_float_array(&radar_number, &mut float_adc_data1);

    let mut fft_1: [[Complex32; 256]; 64] = [[Complex32::new(0.0, 0.0); 256]; 64];


    get_fft( &mut float_adc_data1, &mut fft_1);

    let mut output_bins = Presence {
        is_present: false,
        bin_number: [0,0,0],
    };

    get_magnitude( &mut fft_1, &mut output_bins.bin_number[0]);
}


fn generate_float_array(input_u16: &[[u16; 500]; 64], output_f32: &mut[[f32; 512]; 64]) {
    for i in 0..64 {
        for j in 0..500{
            output_f32[i][j] = input_u16[i][j] as f32;
        }
    }
}


fn get_fft(input_f32: &mut [[f32; 512]; 64], output_fft: &mut [[Complex32; 256]; 64]){
    for i in 0..output_fft.len(){
        let result = rfft_512(&mut input_f32[i]);
        output_fft[i] = *result;
    }
}

fn get_magnitude(input_fft: &mut [[Complex32; 256]; 64], output_max_bin: &mut u8){
    let mut output_magnitude: [[f32; 256]; 64] = [[0.0; 256]; 64];
    for i in 0..64{
        let mut max_index: usize = 0;
        for j in 1..output_magnitude[0].len(){
            output_magnitude[i][j] = ((input_fft[i][j].re as f32).powf(2.0) + (input_fft[i][j].im as f32).powf(2.0)).sqrt();
            if output_magnitude[i][j] > output_magnitude[i][max_index] {
                max_index = j;
            }
        }
        *output_max_bin = max_index as u8;


        println!("{}", max_index);
    }
}
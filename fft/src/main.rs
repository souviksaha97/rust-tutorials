// #![no_std]
use plotters::prelude::*;
use microfft::real::rfft_512;

fn main() {
    let sine: [u16;500] = [
        1740, 1774, 1672, 1686, 1762, 1692, 1536, 1694, 1660, 1624, 1652, 1667, 1622, 1642, 1514, 1652, 1558, 1538, 1464, 1624, 1476, 1506, 1538, 1440, 1508, 1514, 1618, 1544, 1488, 1568, 1714, 1529, 1554, 1588, 1536, 1560, 1572, 1510, 1520, 1526, 1456, 1462, 1476, 1476, 1468, 1510, 1632, 1706, 1764, 1782, 1758, 1749, 1770, 1760, 1756, 1756, 1720, 1660, 1640, 1632, 1614, 1608, 1628, 1686, 1720, 1742, 1766, 1794, 1794, 1787, 1812, 1742, 1616, 1526, 1562, 1416, 1552, 1488, 1617, 1760, 1638, 1676, 1641, 1552, 1734, 1530, 1470, 1512, 1628, 1514, 1584, 1478, 1562, 1604, 1610, 1526, 1741, 1514, 1508, 1564, 1724, 1536, 1521, 1529, 1596, 1626, 1554, 1560, 1694, 1608, 1540, 1600, 1780, 1746, 1668, 1654, 1716, 1784, 1750, 1740, 1744, 1736, 1717, 1652, 1598, 1633, 1646, 1598, 1556, 1572, 1632, 1636, 1586, 1520, 1493, 1463, 1438, 1424, 1424, 1446, 1482, 1508, 1504, 1492, 1503, 1510, 1482, 1420, 1390, 1394, 1499, 1452, 1434, 1356, 1472, 1561, 1604, 1534, 1537, 1676, 1724, 1714, 1670, 1712, 1718, 1822, 1689, 1714, 1732, 1808, 1650, 1686, 1684, 1654, 1662, 1746, 1695, 1794, 1660, 1735, 1762, 1852, 1675, 1768, 1826, 1878, 1790, 1880, 1810, 1834, 1822, 1788, 1804, 1842, 1820, 1814, 1836, 1750, 1674, 1700, 1750, 1809, 1831, 1844, 1834, 1863, 1858, 1862, 1858, 1838, 1826, 1824, 1804, 1772, 1733, 1655, 1576, 1618, 1704, 1713, 1644, 1594, 1600, 1600, 1622, 1622, 1661, 1574, 1628, 1720, 1640, 1708, 1706, 1628, 1854, 1774, 1710, 1606, 1788, 1638, 1640, 1616, 1666, 1754, 1708, 1694, 1814, 1557, 1548, 1578, 1692, 1536, 1558, 1580, 1630, 1666, 1620, 1648, 1772, 1764, 1682, 1770, 1856, 1736, 1694, 1752, 1816, 1722, 1612, 1604, 1591, 1576, 1560, 1538, 1545, 1560, 1590, 1634, 1634, 1636, 1642, 1664, 1670, 1670, 1656, 1639, 1656, 1684, 1652, 1622, 1666, 1724, 1732, 1734, 1722, 1717, 1718, 1722, 1712, 1698, 1712, 1858, 1766, 1724, 1650, 1771, 1790, 1724, 1802, 1830, 1736, 1618, 1664, 1686, 1586, 1538, 1396, 1493, 1480, 1463, 1362, 1482, 1507, 1514, 1530, 1596, 1500, 1547, 1446, 1476, 1512, 1452, 1416, 1594, 1576, 1528, 1498, 1546, 1504, 1544, 1468, 1524, 1492, 1514, 1482, 1464, 1420, 1412, 1402, 1400, 1408, 1404, 1392, 1394, 1414, 1461, 1480, 1474, 1440, 1410, 1402, 1418, 1428, 1438, 1430, 1402, 1394, 1396, 1398, 1398, 1400, 1404, 1412, 1402, 1401, 1404, 1366, 1416, 1366, 1422, 1358, 1398, 1322, 1444, 1444, 1311, 1448, 1474, 1453, 1338, 1318, 1417, 1358, 1453, 1322, 1382, 1402, 1402, 1358, 1488, 1420, 1364, 1326, 1460, 1425, 1417, 1304, 1392, 1426, 1390, 1346, 1503, 1391, 1320, 1400, 1491, 1424, 1410, 1336, 1454, 1480, 1466, 1456, 1456, 1448, 1454, 1464, 1458, 1466, 1473, 1476, 1488, 1478, 1468, 1458, 1462, 1464, 1474, 1476, 1474, 1478, 1492, 1514, 1520, 1528, 1528, 1524, 1524, 1526, 1540, 1550, 1482, 1423, 1532, 1584, 1529, 1554, 1694, 1708, 1540, 1594, 1662, 1594, 1554, 1582, 1560, 1570, 1496, 1584, 1638, 1588, 1464, 1493, 1616, 1600, 1519, 1506, 1461, 1498, 1494, 1552, 1636, 1544, 1554, 1646, 1668, 1628, 1618, 1617, 1600, 1690, 1641, 1632, 1642, 1644, 1672, 1718, 1706, 1690, 1717
    ];

    let mut floater: [f32; 512] = [0.0; 512];

    for i in 0..sine.len() {
        floater[i] = sine[i] as f32;
    }

    let result = rfft_512(&mut floater);
    result[0].re = 0.0;
    result[0].im = 0.0;

    for i in 0..result.len() {
        print!("{}, ", result[i]);
    }

    println!("\r\nnHsfsbf");
 

    let mut magnitude: [f32; 256] = [0.0; 256];
    for i in 0..result.len() {
        magnitude[i] = ((result[i].re as f32).powf(2.0) + (result[i].im as f32).powf(2.0)).sqrt();
        println!("{}", magnitude[i]);
    }

    let root = BitMapBackend::new("chart.png", (640, 480)).into_drawing_area();
    root.fill(&WHITE).unwrap();

    let mut chart = ChartBuilder::on(&root)
        .caption("FFT", ("sans-serif", 30))
        .set_label_area_size(LabelAreaPosition::Left, 40)
        .set_label_area_size(LabelAreaPosition::Bottom, 40)
        .build_cartesian_2d(0..25 as i32, 0..500000)
        .unwrap();

    // Draw the chart
    chart.configure_mesh().draw().unwrap();
    chart.draw_series(LineSeries::new(
        magnitude.iter().enumerate().map(|(i, &val)| (i as i32, val as i32)),
        &BLUE,
    )).unwrap();

    let mut max_index = 0;
    for i in 0..magnitude.len() {
        if magnitude[i] > magnitude[max_index] {
            max_index = i;
        }
    }

    println!("{}", max_index);
    println!("{:?}", magnitude);
}
